
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.55 (git sha1 60f126cd00c94892782470192d6c9f7abebe7c05, clang++ 17.0.0 -fPIC -O3)
[?2004h
yosys> [7m# Read the design[27m
[7mread_verilog -sv relu/relu.sv[27m

[7m# Basic synthesis[27m
[7mhierarchy -check -top relu[27m
[7mproc; opt; [27m
[7mfsm; opt; [27m
[7mmemory; opt[27m

[7m# Flatten design[27m
[7mflatten[27m

[7m# Map to internal cells first[27m
[7mtechmap; opt[27m[A[A[A[A[A[A[A[A[A[A[A[A[A# Read the design
read_verilog -sv relu/relu.sv

# Basic synthesis
hierarchy -check -top relu
proc; opt; 
fsm; opt; 
memory; opt

# Flatten design
flatten

# Map to internal cells first
techmap; opt
[?2004lERROR: File `relu/relu.sv' not found or is a directory
[?2004h
yosys> # Read the design
read_verilog -sv relu/relu.sv

# Basic synthesis
hierarchy -check -top relu
proc; opt; 
fsm; opt; 
memory; opt

# Flatten design
flatten

# Map to internal cells first
techmap; opt[A[A[A[A[A[A[A[A[A[A[A[A[A[K
[K
[K
[K
[K
[K
[K
[K
[K
[K
[K
[K
[K
[K[A[A[A[A[A[A[A[A[A[A[A[A[A[C[C[C[C[C[C[C# Read the design
read_verilog -sv relu/relu.sv

# Basic synthesis
hierarchy -check -top relu
proc; opt; 
fsm; opt; 
memory; opt

# Flatten design
flatten

# Map to internal cells first
techmap; opt[A[A[A[A[A[A[A[A[A[A[A[A[Aabc -liberty ../simple_cells.lib 
[K
[K
[K
[K
[K
[K
[K
[K
[K
[K
[K
[K
[K[A[A[A[A[A[A[A[A[A[A[A[A[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[16P# Read the design
read_verilog -sv relu/relu.sv

# Basic synthesis
hierarchy -check -top relu
proc; opt; 
fsm; opt; 
memory; opt

# Flatten design
flatten

# Map to internal cells first
techmap; opt[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[A[A[A[A[A[A[A[A[A[A[A[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C
[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[1P[1P[1P[1P[1P












[?2004l
1. Executing Verilog-2005 frontend: relu.sv
Parsing SystemVerilog input from `relu.sv' to AST representation.
Generating RTLIL representation for module `\relu'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \relu

2.2. Analyzing design hierarchy..
Top module:  \relu
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

3.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

3.8. Executing PROC_DLATCH pass (convert process syncs to latches).

3.9. Executing PROC_DFF pass (convert process syncs to FFs).

3.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module relu.

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module relu.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\relu'.
Removed a total of 0 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \relu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $ternary$relu.sv:11$1: \data_in -> { 1'0 \data_in [6:0] }
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \relu.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\relu'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \relu..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module relu.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \relu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \relu.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\relu'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \relu..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module relu.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Executing FSM pass (extract and optimize FSM).

5.1. Executing FSM_DETECT pass (finding FSMs in design).

5.2. Executing FSM_EXTRACT pass (extracting FSM from design).

5.3. Executing FSM_OPT pass (simple optimizations of FSMs).

5.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \relu..

5.5. Executing FSM_OPT pass (simple optimizations of FSMs).

5.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

5.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

5.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

6. Executing OPT pass (performing simple optimizations).

6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module relu.

6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\relu'.
Removed a total of 0 cells.

6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \relu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \relu.
Performed a total of 0 changes.

6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\relu'.
Removed a total of 0 cells.

6.6. Executing OPT_DFF pass (perform DFF optimizations).

6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \relu..

6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module relu.

6.9. Finished OPT passes. (There is nothing left to do.)

7. Executing MEMORY pass.

7.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

7.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

7.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

7.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

7.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

7.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \relu..

7.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

7.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

7.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \relu..

7.10. Executing MEMORY_COLLECT pass (generating $mem cells).

7.11. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

8. Executing OPT pass (performing simple optimizations).

8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module relu.

8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\relu'.
Removed a total of 0 cells.

8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \relu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \relu.
Performed a total of 0 changes.

8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\relu'.
Removed a total of 0 cells.

8.6. Executing OPT_DFF pass (perform DFF optimizations).

8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \relu..

8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module relu.

8.9. Finished OPT passes. (There is nothing left to do.)

9. Executing FLATTEN pass (flatten design).

10. Executing TECHMAP pass (map to technology primitives).

10.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v
Parsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

10.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
No more expansions possible.
<suppressed ~76 debug messages>

11. Executing OPT pass (performing simple optimizations).

11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module relu.
<suppressed ~1 debug messages>

11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\relu'.
Removed a total of 0 cells.

11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \relu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \relu.
Performed a total of 0 changes.

11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\relu'.
Removed a total of 0 cells.

11.6. Executing OPT_DFF pass (perform DFF optimizations).

11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \relu..

11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module relu.

11.9. Finished OPT passes. (There is nothing left to do.)
[?2004h
yosys> 
[?2004l[?2004h
yosys> clean
[?2004l[?2004h
yosys> write_verilog relu.sv [K[K[K[K_d[Kgate.v 
[?2004l
12. Executing Verilog backend.

12.1. Executing BMUXMAP pass.

12.2. Executing DEMUXMAP pass.
Dumping module `\relu'.
[?2004h
yosys> stat
[?2004l
13. Printing statistics.

=== relu ===

   Number of wires:                  2
   Number of wire bits:             16
   Number of public wires:           2
   Number of public wire bits:      16
   Number of ports:                  2
   Number of port bits:             16
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  7
     $_MUX_                          7

[?2004h
yosys> show -o[Kformat dot -prefix relu_gate.v  -colors 2
[?2004l14. Generating Graphviz representation of design.
Writing dot description to `relu_gate.v.dot'.
Dumping module relu to page 1.
[?2004h
yosys> show -format dot -prefix relu_gate.v  -colors 2[1P[1P[1P[1P[1@s[1@v[1@g[1@ 
[?2004l
15. Generating Graphviz representation of design.
Writing dot description to `relu_gate.v.dot'.
Dumping module relu to page 1.
Exec: dot -Tsvg 'relu_gate.v.dot' > 'relu_gate.v.svg.new' && mv 'relu_gate.v.svg.new' 'relu_gate.v.svg'
[?2004h
yosys> 